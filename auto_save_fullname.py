# type: ignore
"""
AUTO-SAVE DEVICE FULLNAME USING REAL CHIP_ID
--------------------------------------------
‚úîÔ∏è  Eseguito prima di ogni upload
‚úîÔ∏è  Usa esptool.py interno per leggere il vero chip_id
‚úîÔ∏è  Converte in formato decimale (agrumino-1705890)
‚úîÔ∏è  Evita duplicati nel file di log
"""

import os
import subprocess
from datetime import datetime
from SCons.Script import DefaultEnvironment  # type: ignore

env = DefaultEnvironment()

def _before_upload(source, target, env):
    esptool_path = os.path.join(
        env.PioPlatform().get_package_dir("tool-esptoolpy") or "",
        "esptool.py"
    )
    python_exe = os.path.join(env["PYTHONEXE"])

    port = (
        env.GetProjectOption("upload_port")
        or env.GetProjectOption("monitor_port")
        or env.subst("$UPLOAD_PORT")
        or "COM6"
    )

    device_type = "agrumino-"
    chip_id_dec = "000000"

    print(f"\n[AUTO] üîç Lettura chip_id reale da {port}...")

    try:
        cmd = [python_exe, esptool_path, "--port", port, "chip_id"]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        for line in result.stdout.splitlines():
            if "Chip ID" in line or "chip_id" in line:
                raw_id = line.split(":")[-1].strip()
                if raw_id.startswith("0x"):
                    chip_id_dec = str(int(raw_id, 16))
                else:
                    chip_id_dec = raw_id
                break
    except Exception as e:
        print(f"[AUTO] ‚ö†Ô∏è Errore durante lettura chip_id: {e}")

    fullname = f"{device_type}{chip_id_dec}"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    out_dir = os.path.join(os.getcwd(), "all_device_name")
    os.makedirs(out_dir, exist_ok=True)
    out_file = os.path.join(out_dir, "devices_name.txt")

    # Evita duplicati
    existing = []
    if os.path.exists(out_file):
        with open(out_file, "r", encoding="utf-8") as f:
            existing = f.read().splitlines()

    entry = f"{fullname} | {timestamp}"
    if not any(fullname in line for line in existing):
        with open(out_file, "a", encoding="utf-8") as f:
            if os.stat(out_file).st_size == 0:
                f.write("# DEVICE NAME LOG ‚Äì Auto generated by PlatformIO\n")
            f.write(entry + "\n")
        print(f"[AUTO] ‚úÖ Salvato ‚Üí {out_file}")
        print(f"       {entry}\n")
    else:
        print(f"[AUTO] ‚öôÔ∏è  Gi√† presente ‚Üí {fullname}\n")

# ‚úÖ eseguito PRIMA dell'upload, non della build
env.AddPreAction("upload", _before_upload)
